
interface GroqResponse {
    choices: Array<{
        message: {
            content: string;
        };
    }>;
}

interface AISuggestion {
    diagnostic: string;
    etapes_resolution: string[];
    classification: string;
    priorite: string;
    service_impacte: string;
    temps_resolution_estime: string;
    prevention: string;
}

interface IncidentInfo {
    description: string;
    service: string;
    type_incident: string;
    niveau_urgence: string;
}

class GroqClient {
    private apiKey: string;
    
    constructor(apiKey: string) {
        this.apiKey = apiKey;
    }
    
    async chatCompletionsCreate(params: {
        model: string;
        messages: Array<{role: string; content: string}>;
        temperature: number;
        max_tokens: number;
    }): Promise<GroqResponse> {
        // Implementation for calling Groq API
        const response = await fetch('https://api.groq.com/openai/v1/chat/completions', {
            method: 'POST',
            headers: {
                'Authorization': `Bearer ${this.apiKey}`,
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(params)
        });
        
        if (!response.ok) {
            throw new Error(`API error: ${response.status} ${response.statusText}`);
        }
        
        return response.json();
    }
}

function createFallbackSuggestion(
    description: string, 
    service: string, 
    type_incident: string, 
    niveau_urgence: string, 
): AISuggestion {
    return {
        "diagnostic": description.length > 100 
            ? `Analyse automatique indisponible. Incident: ${description.substring(0, 100)}...` 
            : description,
        "etapes_resolution": [
            "1. Identifier les composants impliqu√©s dans l'incident",
            "2. V√©rifier les connexions r√©seau et alimentation", 
            "3. Red√©marrer les services/√©quipements concern√©s",
            "4. Tester la fonctionnalit√© apr√®s intervention",
            "5. Documenter la solution et escalader si n√©cessaire"
        ],
        "classification": type_incident || "Analyse manuelle requise",
        "priorite": niveau_urgence || "Mod√©r√©e", 
        "service_impacte": service || "Non identifi√©",
        "temps_resolution_estime": "2h",
        "prevention": "Effectuer maintenance pr√©ventive et surveillance proactive"
    };
}

export async function getAISuggestion(incidentInfo : IncidentInfo): Promise<AISuggestion> {
    const { description, service, type_incident, niveau_urgence } = incidentInfo;
    const GROQ_API_KEY = process.env.GROQ_API_KEY;
    
    if (!GROQ_API_KEY) {
        throw new Error("GROQ_API_KEY environment variable is required");
    }
    
    const client = new GroqClient(GROQ_API_KEY);
    
    const systemPrompt = `Tu es un expert IT du Minist√®re des Finances (MINFI) du Cameroun. Ton r√¥le est de fournir des diagnostics pr√©cis et des √©tapes de r√©solution claires et pratiques pour aider les gestionnaires d'incidents informatiques √† r√©soudre efficacement les probl√®mes signal√©s, en s'appuyant sur le contexte sp√©cifique du MINFI.
Analyse l'incident suivant et fournis une r√©ponse structur√©e au format JSON strict.

## Contexte disponible Applications connues (avec d√©pendances) :

üìå **Direction du Budget (DGB)**
- Living.dgb.cm : d√©cisions de d√©blocage (LAN, PROBMIS)
- PGI : comptabilit√© & ex√©cution des d√©penses (Internet, LAN, ANTILOPE, PROBMIS)
- PROBMIS : suivi des engagements budg√©taires (LAN, WAN)
- ANTILOPE : gestion personnel & solde (LAN, WAN)
- AVI : attestation de virement irr√©vocable (LAN)
- DECOSYS : suivi dette flottante (LAN)
- GovRH : suivi personnel DGB (LAN)
- ArchiDccs : archivage documents (LAN)

üìå **CAB-IG-SG**
- E-bulletin : bulletins de solde en ligne (Internet, Interco, ANTILOPE)
- mail.minfi.cm : messagerie professionnelle (Internet, LAN, PROBMIS)
- E-bon : suivi des bons d‚Äôengagements (Internet, LAN, PROBMIS, CADRE, SYSTAC)
- SYGESCA : gestion courrier administratif (LAN)
- FDX : √©changes de donn√©es financi√®res inter-administrations (Internet, LAN, PROBMIS, CAMCIS, HARMONY‚Ä¶)

üìå **DNCM / DP / DRH / DRFI**
- SIGIPES : gestion personnels & solde (LAN, Interconnexion)
- SIPAE : projections macro√©conomiques (LAN, Interconnexion)
- TABORD soft : tableau de bord finances de l‚Äô√âtat (LAN, Interconnexion)
- BDP6+ : balance des paiements FMI (LAN, Interconnexion)
- SRH : gestion RH (LAN, ANTILOPE)
- RMS : record management (LAN)
- COLEPS : e-procurement (LAN, Internet)
- BSP Soft : borne de solde provisoire (LAN)
- DP Manager : gestion fiches (LAN)
- GEPSOFT : comptabilit√© mati√®re (LAN)

INFORMATIONS DE L'INCIDENT:
- Description: ${description}
- Service: ${service}  
- Type: ${type_incident}
- Urgence: ${niveau_urgence}

FORMAT DE R√âPONSE OBLIGATOIRE (JSON uniquement):
{
  "diagnostic": "Diagnostic pr√©cis de la cause probable",
  "etapes_resolution": [
    "1. Action sp√©cifique √† effectuer",
    "2. V√©rification ou test √† faire",
    "3. Configuration √† modifier",
    "4. Escalade si n√©cessaire",
    "5. Validation finale"
  ],
  "classification": "Mat√©riel|Logiciel bureautique|Logiciel m√©tier|Infrastructure R√©seau|S√©curit√©|Autres",
  "priorite": "Critique|√âlev√©e|Mod√©r√©e|Faible",
  "service_impacte": "${service}",
  "temps_resolution_estime": "30min|2h|1j|3j|1sem",
  "prevention": "Mesure pr√©ventive recommand√©e"
}

Analyse maintenant l'incident fourni et retourne UNIQUEMENT le JSON de r√©ponse.`;

    try {
        const response = await client.chatCompletionsCreate({
            model: "llama-3.1-8b-instant",
            messages: [
                {"role": "system", "content": systemPrompt},
                {"role": "user", "content": `Analyse cet incident: ${description}`}
            ],
            temperature: 0.1,
            max_tokens: 1000
        });

        let rawContent = response.choices[0].message.content.trim();
        
        // Extract JSON from code blocks if present
        if (rawContent.includes("```json")) {
            rawContent = rawContent.split("```json")[1].split("```")[0].trim();
        } else if (rawContent.includes("```")) {
            rawContent = rawContent.split("```")[1].split("```")[0].trim();
        }
        
        try {
            const suggestion = JSON.parse(rawContent) as Partial<AISuggestion>;
            /*const requiredFields: (keyof AISuggestion)[] = [
                "diagnostic", "etapes_resolution", "classification", 
                "priorite", "service_impacte", "prevention"
            ];*/
            
            // Create a validated suggestion with default values for missing fields
            const validatedSuggestion: AISuggestion = {
                diagnostic: suggestion.diagnostic || "Non sp√©cifi√©",
                etapes_resolution: Array.isArray(suggestion.etapes_resolution) 
                    ? suggestion.etapes_resolution 
                    : ["Analyser l'incident manuellement"],
                classification: suggestion.classification || "Non sp√©cifi√©",
                priorite: suggestion.priorite || "Mod√©r√©e",
                service_impacte: suggestion.service_impacte || service || "Non identifi√©",
                prevention: suggestion.prevention || "Non sp√©cifi√©",
                temps_resolution_estime: suggestion.temps_resolution_estime || "2h"
            };
            
            return validatedSuggestion;
            
        } catch (parseError) {
            console.error("JSON parsing error:", parseError);
            return createFallbackSuggestion(description, service, type_incident, niveau_urgence);
        }
            
    } catch (error) {
        console.error("API error:", error);
        return createFallbackSuggestion(description, service, type_incident, niveau_urgence);
    }
}
